using Unity.Entities.Serialization;
using UnityEngine;

namespace Game.Mods
{
    public class Serializer
    {
        public void Serialize()
        {
            using (var clientWriter = new StreamBinaryWriter(clientCacheFile))
            {
                SerializeUtility.SerializeWorld(_clientDataWorld.EntityManager, clientWriter,
                    out referenceObjects);
                // Debug.Log(referencedObject);
            }

            var worldReferenceObjects = new WorldReferenceObjects()
            {
                Objects = new WorldReferenceObjectBase[referenceObjects.Length]
            };
            for (var i = 0; i < referenceObjects.Length; i++)
            {
                var referencedObject = referenceObjects[i];
                if (referencedObject is UnityEngine.Object uObject)
                {
                    var key = AssetMap.GetKey(uObject);
                    string address = null;
                    foreach (var assetMap in _contentContainer.AssetMaps)
                    {
                        if (assetMap.AssetIdToAddress.ContainsKey(key))
                        {
                            address = assetMap.AssetIdToAddress[key];
                            break;
                        }
                    }
                    
                    if (!string.IsNullOrWhiteSpace(address))
                    {
                        worldReferenceObjects.Objects[i] = new AddressableWorldReferenceObject()
                        {
                            Address = address,
                            Type = uObject.GetType()
                        };
                    }
                    else
                    {
                        Debug.LogWarning($"Oh noes, Address for {key} {uObject.GetType()} was not found");
                    }
                }
                else
                {
                    Debug.LogWarning(
                        $"Oh noes, world has given us a type we dont know {referencedObject.GetType()}");
                }
            }
            
        }
    }
}


var referenceJson = File.ReadAllText(Path.Combine(_pathRoot, _path2));

        var settings = new JsonSerializerSettings();
        settings.TypeNameHandling = TypeNameHandling.Auto;
        settings.Converters.Add(new TypeConverter());

        var referenceObjectsContainer = JsonConvert.DeserializeObject<WorldReferenceObjects>(referenceJson, settings);
        var referenceObjects = new UnityEngine.Object[referenceObjectsContainer.Objects.Length];
        for (var index = 0; index < referenceObjectsContainer.Objects.Length; index++)
        {
            var worldReferenceObjectBase = referenceObjectsContainer.Objects[index];

            if (worldReferenceObjectBase is AddressableWorldReferenceObject addressable)
            {
                Object result;
                //mesh is evil
                if (addressable.Type == typeof(Mesh))
                {
                    var load = Addressables.LoadAssetAsync<Mesh>(addressable.Address);
                    yield return load;
                    result = load.Result;
                }
                else
                {
                    var load = Addressables.LoadAssetAsync<Object>(addressable.Address);
                    yield return load;

                    result = load.Result;
                }


                referenceObjects[index] = result;
            }
        }